import*as e from"#three.module.min.js";import t from"#threeStats.module.min.js";import{OrbitControls as i}from"#threeOrbitControls.module.min.js";let cont=document.createElement("div");cont.id="container",document.body.appendChild(cont);let group,container,stats,particlesData=[],camera,scene,renderer,positions,colors,particles,pointCloud,particlePositions,linesMesh,maxParticleCount=1e3,particleCount=500,r=800,rHalf=400,effectController={showDots:!0,showLines:!0,minDistance:150,limitConnections:!1,maxConnections:20,particleCount:500};function init(){container=document.getElementById("container"),(camera=new e.PerspectiveCamera(45,window.innerWidth/window.innerHeight,1,4e3)).position.z=1750;let n=new i(camera,container);n.minDistance=1e3,n.maxDistance=3e3,scene=new e.Scene,group=new e.Group,scene.add(group);let o=new e.BoxHelper(new e.Mesh(new e.BoxGeometry(800,800,800)));o.material.color.setHex(1052688),o.material.blending=e.AdditiveBlending,o.material.transparent=!0,group.add(o);positions=new Float32Array(3e6),colors=new Float32Array(3e6);let s=new e.PointsMaterial({color:16777215,size:3,blending:e.AdditiveBlending,transparent:!0,sizeAttenuation:!1});particles=new e.BufferGeometry,particlePositions=new Float32Array(3e3);for(let a=0;a<1e3;a++){let l=800*Math.random()-400,c=800*Math.random()-400,$=800*Math.random()-400;particlePositions[3*a]=l,particlePositions[3*a+1]=c,particlePositions[3*a+2]=$,particlesData.push({velocity:new e.Vector3(-1+2*Math.random(),-1+2*Math.random(),-1+2*Math.random()),numConnections:0})}particles.setDrawRange(0,particleCount),particles.setAttribute("position",new e.BufferAttribute(particlePositions,3).setUsage(e.DynamicDrawUsage)),pointCloud=new e.Points(particles,s),group.add(pointCloud);let p=new e.BufferGeometry;p.setAttribute("position",new e.BufferAttribute(positions,3).setUsage(e.DynamicDrawUsage)),p.setAttribute("color",new e.BufferAttribute(colors,3).setUsage(e.DynamicDrawUsage)),p.computeBoundingSphere(),p.setDrawRange(0,0);let d=new e.LineBasicMaterial({vertexColors:!0,blending:e.AdditiveBlending,transparent:!0});linesMesh=new e.LineSegments(p,d),group.add(linesMesh),(renderer=new e.WebGLRenderer({antialias:!0})).setPixelRatio(window.devicePixelRatio),renderer.setSize(window.innerWidth,window.innerHeight),renderer.outputEncoding=e.sRGBEncoding,container.appendChild(renderer.domElement),stats=new t,container.appendChild(stats.dom),window.addEventListener("resize",onWindowResize)}function onWindowResize(){camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix(),renderer.setSize(window.innerWidth,window.innerHeight)}function animate(){let e=0,t=0,i=0;for(let n=0;n<particleCount;n++)particlesData[n].numConnections=0;for(let o=0;o<particleCount;o++){let s=particlesData[o];if(particlePositions[3*o]+=s.velocity.x,particlePositions[3*o+1]+=s.velocity.y,particlePositions[3*o+2]+=s.velocity.z,(particlePositions[3*o+1]<-400||particlePositions[3*o+1]>400)&&(s.velocity.y=-s.velocity.y),(particlePositions[3*o]<-400||particlePositions[3*o]>400)&&(s.velocity.x=-s.velocity.x),(particlePositions[3*o+2]<-400||particlePositions[3*o+2]>400)&&(s.velocity.z=-s.velocity.z),!effectController.limitConnections||!(s.numConnections>=effectController.maxConnections))for(let a=o+1;a<particleCount;a++){let l=particlesData[a];if(effectController.limitConnections&&l.numConnections>=effectController.maxConnections)continue;let c=particlePositions[3*o]-particlePositions[3*a],$=particlePositions[3*o+1]-particlePositions[3*a+1],p=particlePositions[3*o+2]-particlePositions[3*a+2],d=Math.sqrt(c*c+$*$+p*p);if(d<effectController.minDistance){s.numConnections++,l.numConnections++;let m=1-d/effectController.minDistance;positions[e++]=particlePositions[3*o],positions[e++]=particlePositions[3*o+1],positions[e++]=particlePositions[3*o+2],positions[e++]=particlePositions[3*a],positions[e++]=particlePositions[3*a+1],positions[e++]=particlePositions[3*a+2],colors[t++]=m,colors[t++]=m,colors[t++]=m,colors[t++]=m,colors[t++]=m,colors[t++]=m,i++}}}linesMesh.geometry.setDrawRange(0,2*i),linesMesh.geometry.attributes.position.needsUpdate=!0,linesMesh.geometry.attributes.color.needsUpdate=!0,pointCloud.geometry.attributes.position.needsUpdate=!0,requestAnimationFrame(animate),stats.update(),render()}function render(){let e=.001*Date.now();group.rotation.y=.1*e,renderer.render(scene,camera)}init(),animate();