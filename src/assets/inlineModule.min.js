const loaderMap=window["inline-module-loaders"],currentScript=document.currentScript||document.querySelector("script"),map={imports:{},scopes:{}},installed=new Set;function toBase64(t){return btoa(unescape(encodeURIComponent(t)))}function loadContent(t){let e=new XMLHttpRequest;if(e.open("GET",t,!1),e.send(null),200===e.status)return e.responseText;throw Error(e.statusText)}function replaceImport(t,e){return t.replace(/^(\s*import\s+[\s\S]*?from\s*['"`])([\s\S]*?)(['"`])/gim,(t,r,n,i)=>{let s=e[n];return s?`${r}${s}${i}`:`${r}${n}${i}`})}function getBlobURL(t,e=!1,r={}){let n=t.textContent;t.hasAttribute("src")&&(n=loadContent(t.getAttribute("src")),t.textContent=n),e&&(n=replaceImport(n,r));let i=t.getAttribute("loader");return i&&(n=(i=i.split(/\s*>\s*/)).reduce((e,n)=>{let{transform:i,imports:s}=loaderMap[n],{code:p,map:a}=i(e,{sourceMap:!0,filename:t.getAttribute("name")||t.id||"anonymous"});return e=a?`${p}

//# sourceMappingURL=data:application/json;base64,${toBase64(JSON.stringify(a))}`:p,Object.assign(r.imports,s),e},n)),createBlob(n,"text/javascript")}function createBlob(t,e="text/plain"){let r=new Blob([t],{type:e});return URL.createObjectURL(r)}function setup(){let t=document.querySelectorAll('script[type="inline-module"]'),e={},r=[],n=document.querySelector('script[type="importmap"]');n&&console.warn('Cannot update importmap after  <script type="importmap"> is set. Please use <script type="inline-module-importmap"> instead.'),[...t].forEach(t=>{let{id:i}=t,s=t.getAttribute("name"),p=getBlobURL(t,!!n,e);i&&(e[`#${i}`]=p,e[`//#${i}`]=p),s&&(e[s]=p,e[`//${s}`]=p),r.push(p)});let i=document.querySelector('script[type="inline-module-importmap"]');if(i){let s=JSON.parse(i.textContent);Object.assign(map.imports,s.imports),Object.assign(map.scopes,s.scopes)}if(Object.assign(map.imports,e),!n){let p=document.createElement("script");p.setAttribute("type","importmap"),p.textContent=JSON.stringify(map),currentScript.after(p)}r.forEach(t=>{if(!installed.has(t)){let e=document.createElement("script");e.async=!1,e.setAttribute("type","module"),e.setAttribute("src",t),currentScript.after(e),installed.add(t)}})}"false"!==currentScript.getAttribute("setup")&&setup(),window.inlineImport=async t=>{let{imports:e}=map,r=null;if(t in e)r=e[t];else{let n;/^#/.test(t)&&(n=document.querySelector(`script[type="inline-module"]${t}`)),n||(n=document.querySelector(`script[type="inline-module"][name="${t}"]`)),n&&(r=getBlobURL(n),e[t]=r)}return r?await import(r):null};